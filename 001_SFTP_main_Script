function Show-Menu {
    Write-Host "=========================" -ForegroundColor Cyan
    Write-Host " OpenSSH Server Control" -ForegroundColor Green
     Write-Host " Developed by Andr√© Cruz" -ForegroundColor Green
    Write-Host "=========================" -ForegroundColor Cyan
    Write-Host "1. Install OpenSSH Server"
    Write-Host "2. Start SSH Server"
    Write-Host "3. Stop SSH Server"
    Write-Host "4. Restart SSH Server"
    Write-Host "5. View SSHD Config"
    Write-Host "6. Add SFTP"
    Write-Host "7. Exit"
}

function Install-OpenSSH {
    Write-Host "Installing OpenSSH Server..."
    if (-not (Get-WindowsCapability -Online | Where-Object Name -like 'OpenSSH.Server*' | Where-Object State -eq 'Installed')) {
        try {
            Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
            Write-Host "OpenSSH Server installed successfully." -ForegroundColor Green
        } catch {
            Write-Host "Failed to install OpenSSH Server: $_" -ForegroundColor Red
        }
    } else {
        Write-Host "OpenSSH Server is already installed." -ForegroundColor Yellow
    }
}

function Start-SSHServer {
    Write-Host "Starting SSH Server..."
    try {
        Start-Service sshd
        Write-Host "SSH Server started successfully." -ForegroundColor Green
    } catch {
        Write-Host "Failed to start SSH Server: $_" -ForegroundColor Red
    }
}

function Stop-SSHServer {
    Write-Host "Stopping SSH Server..."
    try {
        Stop-Service sshd
        Write-Host "SSH Server stopped successfully." -ForegroundColor Green
    } catch {
        Write-Host "Failed to stop SSH Server: $_" -ForegroundColor Red
    }
}

function Restart-SSHServer {
    Write-Host "Restarting SSH Server..."
    try {
        Restart-Service sshd
        Write-Host "SSH Server restarted successfully." -ForegroundColor Green
    } catch {
        Write-Host "Failed to restart SSH Server: $_" -ForegroundColor Red
    }
}

function View-SSHDConfig {
    Write-Host "Viewing SSHD config..."
    $sshdConfigPath = "$env:ProgramData\ssh\sshd_config"
    if (Test-Path $sshdConfigPath) {
        Get-Content -Path $sshdConfigPath | Out-String | Write-Host
    } else {
        Write-Host "SSHD config file not found." -ForegroundColor Red
    }
}

function Add-SFTP {
    Write-Host "Adding SFTP functionality..."

    # Prompt to select between user or group
    $selectionType = Read-Host "Select (1) User or (2) Group"

    if ($selectionType -eq "1") {
        $selectedUser = Read-Host "Enter the username for SFTP"
        $selectedPath = Read-Host "Enter the directory to set as the SFTP root"
        
        $sshdConfigPath = "$env:ProgramData\ssh\sshd_config"
        if (-not (Test-Path $sshdConfigPath)) {
            Write-Host "SSHD config file not found." -ForegroundColor Red
            return
        }

        # Read the contents of the SSHD config
        $sshdConfig = Get-Content -Path $sshdConfigPath

        # Find the index of the line that contains "Match All"
        $matchIndex = ($sshdConfig | Select-String "Match All").LineNumber - 1

        if ($matchIndex -ge 0) {
            # Insert the new SFTP configuration entry before the "Match All" line
            $entry = "Match User $selectedUser`r`n    PasswordAuthentication yes`r`n    ChrootDirectory $selectedPath`r`n    ForceCommand sftp-server.exe -d priv"
            $sshdConfig = $sshdConfig[0..($matchIndex-1)] + $entry + $sshdConfig[$matchIndex..($sshdConfig.Length - 1)]
        } else {
            Write-Host "'Match All' expression not found. Appending to the end of the file." -ForegroundColor Yellow
            # If "Match All" is not found, add the entry at the end
            $entry = "Match User $selectedUser`r`n    PasswordAuthentication yes`r`n    ChrootDirectory $selectedPath`r`n    ForceCommand sftp-server.exe -d priv"
            $sshdConfig += $entry
        }

        # Write the updated configuration back to the SSHD config file
        Set-Content -Path $sshdConfigPath -Value $sshdConfig

        try {
            # Adjust the file permissions for the selected path
            $acl = Get-Acl -Path $selectedPath
            $newOwner = New-Object System.Security.Principal.NTAccount($selectedUser)
            $acl.SetOwner($newOwner)
            Set-Acl -Path $selectedPath -AclObject $acl

            # Restart SSHD service
            Restart-Service sshd
            Write-Host "SFTP added successfully for user. SSHD restarted." -ForegroundColor Green
        } catch {
            Write-Host "Failed to configure SFTP: $_" -ForegroundColor Red
        }
    }

    elseif ($selectionType -eq "2") {
        $selectedGroup = Read-Host "Enter the group name for SFTP"
        $selectedPath = Read-Host "Enter the directory to set as the SFTP root"

        $sshdConfigPath = "$env:ProgramData\ssh\sshd_config"
        if (-not (Test-Path $sshdConfigPath)) {
            Write-Host "SSHD config file not found." -ForegroundColor Red
            return
        }

        # Read the contents of the SSHD config
        $sshdConfig = Get-Content -Path $sshdConfigPath

        # Find the index of the line that contains "Match All"
        $matchIndex = ($sshdConfig | Select-String "Match All").LineNumber - 1

        if ($matchIndex -ge 0) {
            # Insert the new SFTP configuration entry before the "Match All" line
            $entry = "Match Group $selectedGroup`r`n    PasswordAuthentication yes`r`n    ChrootDirectory $selectedPath`r`n    ForceCommand sftp-server.exe -d priv"
            $sshdConfig = $sshdConfig[0..($matchIndex-1)] + $entry + $sshdConfig[$matchIndex..($sshdConfig.Length - 1)]
        } else {
            Write-Host "'Match All' expression not found. Appending to the end of the file." -ForegroundColor Yellow
            # If "Match All" is not found, add the entry at the end
            $entry = "Match Group $selectedGroup`r`n    PasswordAuthentication yes`r`n    ChrootDirectory $selectedPath`r`n    ForceCommand sftp-server.exe -d priv"
            $sshdConfig += $entry
        }

        # Write the updated configuration back to the SSHD config file
        Set-Content -Path $sshdConfigPath -Value $sshdConfig

        try {
            # Adjust the file permissions for the selected path
            $acl = Get-Acl -Path $selectedPath
            $newOwner = New-Object System.Security.Principal.NTAccount($selectedGroup)
            $acl.SetOwner($newOwner)
            Set-Acl -Path $selectedPath -AclObject $acl

            # Restart SSHD service
            Restart-Service sshd
            Write-Host "SFTP added successfully for group. SSHD restarted." -ForegroundColor Green
        } catch {
            Write-Host "Failed to configure SFTP: $_" -ForegroundColor Red
        }
    }

    else {
        Write-Host "Invalid option selected. Please choose either User (1) or Group (2)." -ForegroundColor Red
    }
}


# Main Loop
do {
    Show-Menu
    $choice = Read-Host "Select an option (1-7)"

    switch ($choice) {
        1 { Install-OpenSSH }
        2 { Start-SSHServer }
        3 { Stop-SSHServer }
        4 { Restart-SSHServer }
        5 { View-SSHDConfig }
        6 { Add-SFTP }
        7 { Write-Host "Exiting..." -ForegroundColor Yellow }
        default { Write-Host "Invalid choice. Please select a valid option." -ForegroundColor Red }
    }
} while ($choice -ne 7)
